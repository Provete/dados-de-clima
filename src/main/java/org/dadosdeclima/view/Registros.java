/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package org.dadosdeclima.view;

import org.dadosdeclima.model.DadoClimatico;
import org.dadosdeclima.observable.Observer;
import org.dadosdeclima.presenter.DadosPresenter;
import javax. swing. table. TableModel;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;

/**
 *
 * @author Ruan Ribeiro
 */
public class Registros extends javax.swing.JInternalFrame implements Observer
{
    DadosPresenter presenter;
    /**
     * Creates new form Registros
     */
    public Registros(DadosPresenter presenter)
    {
        this.presenter = presenter;
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        removerButton = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Temperatura", "Umidade", "Press√£o"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        removerButton.setText("Remover");
        removerButton.setToolTipText("");
        removerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(removerButton)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removerButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removerButtonActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_removerButtonActionPerformed
        int selectedRowIndex = jTable1.getSelectedRow();
        if(selectedRowIndex == -1)
            return;

        LocalDate localDate = LocalDate.parse( jTable1.getValueAt(selectedRowIndex, 0).toString() );
        float temp = Float.parseFloat(jTable1.getValueAt(selectedRowIndex, 1).toString());
        float umidade = Float.parseFloat(jTable1.getValueAt(selectedRowIndex, 2).toString());
        float pressao = Float.parseFloat(jTable1.getValueAt(selectedRowIndex, 3).toString());

        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.removeRow(selectedRowIndex);
        presenter.removerDado(new DadoClimatico(localDate, temp, umidade, pressao));
    }//GEN-LAST:event_removerButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton removerButton;

    @Override
    public void update(DadoClimatico event)
    {
        if(!event.equals( presenter.ultimo() ))
            return;

        Object[] dados = new Object[]{event.getData().toString(),
                event.getTemperaturaCelsius(),
                event.getUmidadePorcentagem(),
                event.getPressaoPascal()};
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.addRow(dados);
    }
    // End of variables declaration//GEN-END:variables
}
